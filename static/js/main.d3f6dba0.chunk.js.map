{"version":3,"sources":["Components/firebase.js","Components/BandForm.js","Components/ImageForm.js","Components/ImageSelection.js","Components/StagingArea.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","BandForm","props","bandValue","setBandValue","saveBandValue","className","action","id","htmlFor","sr-only","type","maxLength","onChange","value","placeholder","onClick","ImageForm","imageValue","setImageValue","saveImageValue","ImageSelection","url","selectImage","src","alt","aria-label","role","aria-hidden","StagingArea","createVinyl","App","handleHide","setState","isActive","handleBandValue","e","bandName","target","handleBandSubmit","preventDefault","state","Swal","fire","title","text","icon","confirmButtonText","bandNameCapture","handleImageValue","imageSearch","handleImageSubmit","axios","method","headers","Authorization","dataResponse","params","query","per_page","then","res","apiResults","data","photos","total_results","imageResults","catch","handleReset","showCancelButton","result","isDenied","isConfirmed","document","location","reload","handleKeep","finalImage","updatedList","filter","_","index","selectedImage","medium","finalImageCapture","handleVinylRender","vinyl","band","image","record","label","database","ref","push","buttonClicked","handleVinylRemove","vinylKey","child","remove","vinylFinal","on","response","newVinylFinal","val","key","this","map","item","href","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d3f6dba0.chunk.js","sourcesContent":["import firebase from 'firebase/app'; \nimport 'firebase/database'; \n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyAypbgrSlQWzIjBdVr30VV_hZncaC_x_lA\",\n        authDomain: \"vinyl-resting-place.firebaseapp.com\",\n        databaseURL: \"https://vinyl-resting-place.firebaseio.com\",\n        projectId: \"vinyl-resting-place\",\n        storageBucket: \"vinyl-resting-place.appspot.com\",\n        messagingSenderId: \"696854720831\",\n        appId: \"1:696854720831:web:0648b5086ca196ece9a38a\"\n    };\n    \n    firebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\n\nconst BandForm = (props) => {\n\n    const { bandValue, setBandValue, saveBandValue } = props\n    \n    return (\n        <div className=\"stepOne\">\n            <h3>Let's start with a band name. Your choice.</h3>\n\n            <form className=\"bandForm\" action=\"submit\" id=\"bandForm\">\n                <div className=\"bandFormContainer\">\n                    <label htmlFor=\"findName\" sr-only=\"enter band name here\"></label>\n                    <input \n                        type=\"text\" \n                        id=\"findName\" \n                        maxLength = \"13\"\n                        onChange={setBandValue}\n                        value={bandValue} \n                        placeholder=\"ex: The Coders\"/>\n                    <p>Max. length: 13 characters</p>\n                </div>\n\n                <div>\n                    <button \n                        className=\"nameButton\" \n                        type=\"submit\" \n                        onClick={saveBandValue}>submit\n                    </button>\n                </div>\n            </form>   \n        </div>\n    )\n}\n\nexport default BandForm;","import React from 'react';\n\nconst ImageForm = (props) => {\n\n    const { imageValue, setImageValue, saveImageValue } = props\n\n    return (\n        <div>\n            <form className=\"imageForm\" action=\"submit\" id=\"imageForm\">\n\n                <div className=\"imageFormContainer\">\n                    <label htmlFor=\"searchImage\" sr-only=\"enter band name here\"></label>\n                    <input\n                        type=\"text\"\n                        id=\"searchImage\"\n                        maxLength = \"25\"\n                        onChange={setImageValue}\n                        value={imageValue}\n                        placeholder=\"ex: lemon tree\" />\n                    <p>Max. length: 25 characters</p>\n                </div>\n                \n                <div>\n                    <button \n                        className=\"searchImageButton\"\n                        type=\"submit\" \n                        onClick={saveImageValue}>submit\n                    </button>\n                </div>\n\n            </form>\n        </div>\n    )\n}\n\nexport default ImageForm;","import React from 'react';\n\nconst ImageSelection = (props) => {\n\n    const { url, selectImage } = props\n    return (\n        <li>\n            <div className=\"imageBox\">\n                <img src={url} alt=\"Vinyl artwork option\" />\n            </div>\n\n            <button className=\"selectImageButton\"\n                onClick={selectImage}\n                type=\"submit\"\n                aria-label=\"click here to select this vinyl artwork\">\n                <span className=\"fa-stack fa-2x\" role=\"img\" aria-hidden=\"true\">\n                    <i className=\"fas fa-circle fa-stack-2x\"></i>\n                    <i className=\"fas fa-check fa-stack-1x fa-inverse\"></i>\n                </span>\n            </button>\n            \n        </li>\n    )\n}\n\nexport default ImageSelection;","import React from 'react';\n\nconst StagingArea = (props) => {\n\n    const { createVinyl } = props;\n\n    return (\n        <div className=\"stepThree\">\n            <h3>Click on the arrow below to print your vinyl.</h3>\n\n            <button\n                className=\"finalizeButton\"\n                onClick={createVinyl}\n                type=\"submit\"\n                aria-label=\"click here to see your vinyl record cover\">\n                <span className=\"fa-stack fa-2x\" role=\"img\" aria-hidden=\"true\">\n                    <i className=\"fas fa-circle fa-stack-2x\"></i>\n                    <i className=\"fas fa-arrow-down fa-stack-1x fa-inverse\"></i>\n                </span>\n            </button>\n\n        </div>\n    )\n}\n\nexport default StagingArea;","import React, { Component } from 'react';\n\n// Packages -----------------------\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport firebase from './Components/firebase';\n\n// Components -----------------------\nimport BandForm from './Components/BandForm';\nimport ImageForm from './Components/ImageForm';\nimport ImageSelection from './Components/ImageSelection';\nimport StagingArea from './Components/StagingArea';\nimport './App.css';\n\n\nclass App extends Component {\n  // Setting properties on state object -----------------------\n  constructor() {\n    super();\n    this.state = {\n      isActive: true,\n      bandName: '',\n      bandNameCapture: '',\n      imageSearch: '',\n      imageResults: [],\n      finalImageCapture: '',\n      buttonClicked: false,\n      vinylFinal: [],\n    };\n  }\n\n  // Pulling object data (vinyl info) from Firebase -----------------------\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (response) => {\n      const newVinylFinal = [];\n      const data = response.val();\n\n      for (let key in data) {\n        newVinylFinal.push({\n          key: key,\n          band: data[key].band,\n          image: data[key].image,\n          label: data[key].label,\n          record: data[key].record,\n        });\n      }\n\n      this.setState({\n        vinylFinal: newVinylFinal,\n      });\n    });\n  }\n\n  // Hide components / elements on render -----------------------\n  handleHide = () => {\n    this.setState({\n      isActive: false,\n    });\n  };\n\n  // BandForm Component - Input + submit handling -----------------------\n  handleBandValue = (e) => {\n    this.setState({\n      bandName: e.target.value,\n    });\n  };\n\n  handleBandSubmit = (e) => {\n    e.preventDefault();\n\n    // Error message for empty input string ---------\n    if (this.state.bandName === '') {\n      Swal.fire({\n        title: 'Missing info',\n        text: 'You need a band name to start.',\n        icon: 'error',\n        confirmButtonText: 'Okay',\n      });\n\n    } else {\n      // Capture value and reset input ---------\n      this.setState({ bandNameCapture: this.state.bandName }, () => {\n        this.setState({\n          bandName: '',\n        });\n      });\n\n      // Hide component for conditional rendering below ---------\n      this.handleHide();\n    }\n  };\n\n  // ImageForm Component - Input + submit handling -----------------------\n  handleImageValue = (e) => {\n    this.setState({\n      imageSearch: e.target.value,\n    });\n  };\n\n  handleImageSubmit = (e) => {\n    e.preventDefault();\n\n    // API call using keyword searched ---------\n    // API Source: https://www.pexels.com/api/documentation/?locale=en-US\n    const apiAuth = \"563492ad6f917000010000012aa97dcd697246f8b109b93cf6e01222\";\n    const apiURL = \"https://api.pexels.com/v1/search\";\n\n    axios({\n      method: \"GET\",\n      headers: {\n        Authorization: apiAuth,\n      },\n      url: apiURL,\n      dataResponse: \"json\",\n      params: {\n        query: this.state.imageSearch,\n        per_page: 6,\n      },\n    })\n      // Successful reply from API ---------\n      .then((res) => {\n        let apiResults = res.data.photos;\n\n        // Error message for no results found ---------\n        if (res.data.total_results === 0) {\n          Swal.fire({\n            title: \"No results\",\n            text: \"Try another keyword.\",\n            icon: \"warning\",\n            confirmButtonText: \"Okay.\",\n          });\n        } else {\n          // Capture results and reset input ---------\n          this.setState({\n            imageResults: apiResults,\n            imageSearch: \"\",\n          });\n        }\n      })\n\n      // Unsuccessful reply from API ---------\n      .catch(() => {\n        // Error message for empty string ---------\n        Swal.fire({\n          title: \"Missing info\",\n          text: \"Looks like the input field is empty... try addind a keyword.\",\n          icon: \"error\",\n          confirmButtonText: \"Got it!\",\n        });\n      });\n  };\n\n  // Reset button handling -----------------------\n  handleReset = () => {\n\n    // Warning message for page refresh ---------\n    Swal.fire({\n      title: 'Are you sure you want to start over?',\n      text: 'This action will reload the page and clear all inputs.',\n      icon: 'question',\n      showCancelButton: true,\n      confirmButtonText: 'Yes',\n    }).then((result) => {\n\n      // If denied, close modal\n      if (result.isDenied) {\n\n      // If confirmed, refresh page and clear inputs\n      } else if (result.isConfirmed) {\n        document.location.reload();\n      }\n    });\n  };\n\n  // ImageSelection Component - Input + submit handling -----------------------\n  handleKeep = (finalImage) => {\n    const imageList = [...this.state.imageResults];\n\n    const updatedList = imageList.filter((_, index) => {\n      return finalImage === index;\n    });\n\n    const selectedImage = updatedList[0].src.medium;\n\n    // Capture selected image ---------\n    this.setState({\n      imageResults: updatedList,\n      finalImageCapture: selectedImage,\n    });\n  };\n\n  // StagingArea Component - Submit handling -----------------------\n  handleVinylRender = () => {\n\n    // Create object to store in Firebase ---------\n    const { bandNameCapture: band, finalImageCapture: image } = this.state;\n    const vinyl = {\n      band,\n      image,\n      record: 'https://drive.google.com/uc?export=view&id=1jx-571vPoGr3N79uBbkVazJv107Qxisv',\n      label: 'https://drive.google.com/uc?export=view&id=1BK9JMkP6zPkG993koRQ6kQn6pwrfE-Lu',\n    };\n\n    const dbRef = firebase.database().ref();\n\n    // Pushing object data (vinyl info) to Firebase ---------\n    dbRef.push(vinyl);\n\n    // Capture button click event for conditional rendering below ---------\n    this.setState({\n      buttonClicked: true,\n    });\n  };\n\n  // Remove vinyl from Firebase -----------------------\n  handleVinylRemove = (vinylKey) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(vinylKey).remove();\n  };\n\n  // Render elements and components -----------------------\n  render() {\n\n    // Copyright for footer ---------\n    const copyright = \"\\u00A9\";\n\n    return (\n      <div className=\"App\">\n\n        {/* Header ------------- */}\n        <header>\n          <div className=\"wrapper\">\n            <h1>\n              <span className=\"slanted\">Vinyl Resting Place</span>\n            </h1>\n            <h2>The Vinyl Cover Creator</h2>\n          </div>\n        </header>\n\n        {/* Main ------------- */}\n        <main>\n\n          {/* Reset button ------ */}\n          <div className=\"resetContainer\">\n            <button\n              className=\"resetButton\"\n              type=\"reset\"\n              onClick={this.handleReset}>start over\n            </button>\n          </div>\n\n          <div className=\"wrapper\">\n\n            {/* Form inputs and results section ------ */}\n            <section className=\"vinylInput\">\n              \n              {/* BandForm Component------ */}\n              {this.state.isActive === true && (\n                <div className=\"stepOne\">\n                  <BandForm\n                    bandValue={this.state.bandName}\n                    setBandValue={this.handleBandValue}\n                    saveBandValue={this.handleBandSubmit}\n                  />\n                </div>\n              )}\n\n              {/* ImageForm Component ------ */}\n              {this.state.bandNameCapture !== \"\" &&\n                this.state.isActive === false && (\n                  <div className=\"stepTwo\">\n                    <h3>How about an image for your vinyl sleeve?</h3>\n                    <ImageForm\n                      imageValue={this.state.imageSearch}\n                      setImageValue={this.handleImageValue}\n                      saveImageValue={this.handleImageSubmit}\n                    />\n                  </div>\n                )}\n\n              {/* ImageResults Component ------ */}\n              <div className=\"imagesContainer\">\n                <ul>\n                  {this.state.imageResults.map((image, index) => {\n                    return (\n                      <ImageSelection\n                        url={image.src.medium}\n                        selectImage={() => this.handleKeep(index)}\n                        key={index}\n                      />\n                    );\n                  })}\n                </ul>\n              </div>\n\n              {/* Final image capture ------ */}\n              {this.state.bandNameCapture !== \"\" && this.state.finalImageCapture !== \"\" && (\n                <StagingArea createVinyl={this.handleVinylRender} />\n              )}\n\n            </section>\n            \n            {/* Vinyl outputs section ------ */}\n            <section className=\"vinylOutput\">\n\n              {/* Vinyl objects pulled from Firebase ------ */}\n              {this.state.buttonClicked === true && this.state.vinylFinal.map((item) => {\n                  return (\n                    <div className=\"vinylRecord\" key={item.key}>\n                      <p>{item.band}</p>\n                      <img className=\"vinylCover\" src={item.image} alt=\"Vinyl record cover\" />\n                      <img className=\"vinylLabel\" src={item.label} alt=\"Vinyl record label\" />\n                      <img className=\"vinylRecord\" src={item.record} alt=\"Vinyl record\" />\n                      <button \n                        className=\"removeButton\"\n                        type=\"submit\"\n                        aria-label=\"click here to see your vinyl record cover\"\n                        onClick={() => {this.handleVinylRemove(item.key);}}>\n                          <span className=\"fa-stack fa-2x\" role=\"img\" aria-hidden=\"true\" >\n                            <i className=\"fas fa-circle fa-stack-2x\"></i>\n                            <i className=\"fas fa-times fa-stack-1x fa-inverse\"></i>\n                          </span>\n                      </button>\n                    </div>\n                  );\n                })}\n\n            </section>\n          </div>\n        </main>\n\n        {/* Footer ------------- */}\n        <footer>\n          <p> \n            Created by Kristen Delorey at <a href=\"https://junocollege.com\">Juno College</a>\n          </p>\n          <p>Copyright {copyright} 2020 Juno College of Technology</p>\n          \n          {/* Social media ------ */}\n          <p className=\"footerSocial\">\n            Follow me: <a href=\"https://twitter.com/kdlry\">Twitter</a>\n            <a href=\"https://github.com/kdlry\">Github</a>\n            <a href=\"https://www.linkedin.com/in/kristen-delorey\">LinkedIn</a>\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}